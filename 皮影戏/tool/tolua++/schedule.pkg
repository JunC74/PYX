

class Schedule : public Object
{
public:
		static Schedule* GetInstance();

		// @brief 根据TimeingID来注销其调度
		// @param 注销Timeing的ID
		void UnRegisterForTimeing(int id);

		// Lua Support
		// @brief 注册脚本函数
		// return Timeing的ID，提供给
		int RegisterScriptFunc(LUA_FUNCTION nHandler, float fInterval, bool bPaused);

		// @brief 设置Timeing的优先级
		// @param 需要设置的Timeing的ID和优先级
		void SetTimeingPriority(int Timeing_id, int priority);
		
		int GetTimeingPriority(int Timeing_id);

		// @brief 对象的调度是否处于暂停状态
		// @param 查询的对象
		bool IsTargetPause(int id);

		// @brief 暂停对象的调度
		void PauseTimeing(int id);

		// @brief 恢复对象的调度
		void ResumeTimeing(int id);

		// @brief 暂停调度器的调度
		void PauseAllTarget();

		// @brief 恢复调度器的调用
		void ResumeAllTarget();

		// @brief 设置调度器的时间速度
		void SetTimeScale(float time_scale) { time_scale_ = time_scale; }
		
		// @brief 获取调度器的时间速度
		float GetTimeScale(void) { return time_scale_; }

		void Update(float dt);
		
		~Schedule();
};