// 光源的类型
enum LightType
{
	LIGHT_Point,		// 点光源
	LIGHT_Spot,			// 聚光灯
	LIGHT_Directional,	// 方向光
	LIGHT_TYPE_NUM,		// 光源的数量
};

// 光源结构体
class Light : public Object
{
public:
	bool		power;			// 光源开关
	//vec4		position;		// 世界坐标
	float		attenuation;	// 衰减系数 
	Color4f		ambient;		// 环境光
	Color4f		diffuse;		// 漫反射光
	Color4f		specular;		// 镜面反射光
	vec3		direction;		// 光源方向 (LIGHT_Spot & LIGHT_Directional)
	//float		range;			// 光照范围 (LIGHT_Point & LIGHT_Spot)
	GLfloat		spot_theta;			// 聚光灯的内锥大小 (LIGHT_Spot)
	GLfloat		spot_phi;			// 聚光灯的外锥大小 (LIGHT_Spot)
	static Light* Create(LightType type);
	LightType GetLightType();
	// 围绕v3_axle向量旋转f_angle度。
	void Rotate(vec3 v3_axle, float f_angle);
	void RotateX(float f_angle);
	void RotateY(float f_angle);
	void RotateZ(float f_angle);

	// 自旋
	void Spin(vec3 v3_axle, float f_angle);
	void SpinX(float f_angle);
	void SpinY(float f_angle);
	void SpinZ(float f_angle);

	// 平移操作
	void Translation(vec3 v3_translation) ;
	void TranslationX(float f_translation_x);
	void TranslationY(float f_translation_y);
	void TranslationZ(float f_translation_z);

	vec4 GetPosition();
}; // end Light

class LightManage : public Object
{
public:

	static LightManage* Create();
	
	// 返回光源的索引
	void AddObject(Light* object);

	void CloseAll();

	void CloseTag(LightType type, int index);

	void OpeningAll();

	void OpeningTag(LightType type, int index);

	void Clear();

	void DeleteTag(LightType type, int index);

	void DeleteTag(Light* object);

	Light* GetByIndex(LightType type, int index) { return Light_type_index_[type].at(index); }

	// 获取某个类型的光源数量
	int GetLightNum(LightType type);

	void Bind(Material *material);

	bool Init();
}; // end class LightManage